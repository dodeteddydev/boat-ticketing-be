generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  boatowner
  boatadmin
  customer
}

enum Status {
  verified
  unverified
}

enum IdType {
  ktp
  passport
}

enum BookingStatus {
  pending
  paid
  expired
}

enum TransactionType {
  pending
  incoming
  outgoing
  failed
}

model Country {
  id Int @id @default(autoincrement())
  country_name String @db.VarChar(100)
  country_code String @db.VarChar(100) @unique
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  province Province[]
  city City[]
  port Port[]
  booking Booking[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("country")
}

model Province {
  id Int @id @default(autoincrement())
  province_name String @db.VarChar(100)
  province_code String? @db.VarChar(100)
  country_id Int
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  city City[]
  port Port[]
  booking Booking[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("province")
}

model City {
  id Int @id @default(autoincrement())
  city_name String @db.VarChar(100)
  country_id Int
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  province_id Int
  province Province @relation(fields: [province_id], references: [id], onDelete: Cascade)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  port Port[]
  booking Booking[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("city")
}

model User {
  id Int @id @default(autoincrement())
  role Role
  name String @db.VarChar(100)
  username String @db.VarChar(50)
  email String @db.VarChar(100)
  password String @db.VarChar(255)
  status Status @default(unverified)
  wallet Wallet?
  country Country[]
  province Province[]
  city City[]
  category Category[]
  boat Boat[]
  port Port[]
  schedule Schedule[]
  booking Booking[]
  created_by_id Int?
  created_by    User?    @relation("user_created_by", fields: [created_by_id], references: [id])
  created_users User[]   @relation("user_created_by")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("user")
}

model Wallet {
  id Int @id @default(autoincrement())
  amount Float @default(0)
  transaction Transaction[]
  user_id Int @unique
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  updated_at DateTime @updatedAt

  @@map("wallet")
}

model Transaction {
  id Int @id @default(autoincrement())
  wallet_id Int
  wallet Wallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  amount_transaction Float @default(0)
  proof_image String? @db.VarChar(255)
  transaction_type TransactionType
  created_at DateTime @default(now())

  @@map("transaction")
}

model Category {
  id Int @id @default(autoincrement())
  category_name String @db.VarChar(100)
  category_code String @db.VarChar(100)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  boat Boat[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("category")
}

model Boat {
  id Int @id @default(autoincrement())
  boat_name String @db.VarChar(100)
  boat_code String @db.VarChar(100)
  category_id Int
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  schedule Schedule[]
  image String? @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("boat")
}

model Port {
  id Int @id @default(autoincrement())
  port_name String @db.VarChar(100)
  port_code String @db.VarChar(100)
  country_id Int
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  province_id Int
  province Province @relation(fields: [province_id], references: [id], onDelete: Cascade)
  city_id Int
  city City @relation(fields: [city_id], references: [id], onDelete: Cascade)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  schedule_arrival Schedule[] @relation("arrival_port")
  schedule_departure Schedule[] @relation("departure_port")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("port")
}

model Schedule {
  id Int @id @default(autoincrement())
  schedule DateTime
  seat Int
  price Float
  markup_price Float?
  boat_id Int
  boat Boat @relation(fields: [boat_id], references: [id], onDelete: Cascade)
  arrival_id Int
  arrival Port @relation("arrival_port",fields: [arrival_id], references: [id], onDelete: Cascade)
  departure_id Int
  departure Port @relation("departure_port",fields: [departure_id], references: [id], onDelete: Cascade)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  booking Booking[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("schedule")
}

model Booking {
  id Int @id @default(autoincrement())
  schedule_id Int
  schedule Schedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  booking_number String @db.VarChar(50)
  passenger_name String @db.VarChar(100)
  id_type IdType
  id_number String @db.VarChar(50)
  country_id Int
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  province_id Int
  province Province @relation(fields: [province_id], references: [id], onDelete: Cascade)
  city_id Int
  city City @relation(fields: [city_id], references: [id], onDelete: Cascade)
  address String @db.VarChar(255)
  booking_status BookingStatus @default(pending)
  created_by_id Int
  created_by User @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  active Boolean @default(true)

  @@map("booking")
}